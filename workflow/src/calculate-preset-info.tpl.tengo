// get preset

self := import("@platforma-sdk/workflow-tengo:tpl")
smart := import("@platforma-sdk/workflow-tengo:smart")
ll := import("@platforma-sdk/workflow-tengo:ll")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")

self.validateInputs({
	"__options__,closed": "",
	preset: "any",
	params: {
		"__options__,closed": "",
		"species,omitempty": "string",
		"leftAlignmentMode,omitempty": "string",
		"rightAlignmentMode,omitempty": "string",
		"materialType,omitempty": "string",
		"tagPattern,omitempty": "string",
		"assembleClonesBy,omitempty": "string"
	}
})

mixcrSw := assets.importSoftware("@platforma-open/milaboratories.software-mixcr:memory-from-limits")

self.defineOutputs("preset", "presetSpecForBack")

self.body(func(inputs) {
	preset := inputs.preset
	species := inputs.params.species
	leftAlignmentMode := inputs.params.leftAlignmentMode
	rightAlignmentMode := inputs.params.rightAlignmentMode
	materialType := inputs.params.materialType
	tagPattern := inputs.params.tagPattern
	assembleClonesBy := inputs.params.assembleClonesBy

	mixcrExportPresetCmdBuilder := exec.builder().
		inLightQueue().
		mem("512MiB").
		software(mixcrSw).
		env("MI_USE_SYSTEM_CA", "true").
		secret("MI_LICENSE", "MI_LICENSE").
		printErrStreamToStdout().
		arg("exportPreset")

	if smart.isResource(preset) /* file */ {
		mixcrExportPresetCmdBuilder.
			arg("--preset-name").
			arg("local#input_preset").
			addFile("input_preset.yaml", preset)
	} else {
		ll.assert(!is_undefined(preset.name), "undefined preset name")
		mixcrExportPresetCmdBuilder.
			arg("--preset-name").
			arg(preset.name)
	}

	if !is_undefined(species) {
		mixcrExportPresetCmdBuilder.arg("--species").arg(species)
	}

	if !is_undefined(leftAlignmentMode) {
		mixcrExportPresetCmdBuilder.arg(leftAlignmentMode)
	}
	if !is_undefined(rightAlignmentMode) {
		mixcrExportPresetCmdBuilder.arg(rightAlignmentMode)
	}
	if !is_undefined(materialType) {
		mixcrExportPresetCmdBuilder.arg(materialType)
	}
	if !is_undefined(tagPattern) {
		mixcrExportPresetCmdBuilder.arg("--tag-pattern").arg(tagPattern)
	}
	if !is_undefined(assembleClonesBy) {
		mixcrExportPresetCmdBuilder.arg("--assemble-clonotypes-by").arg(assembleClonesBy)
	}

	mixcrExportPresetCmd := mixcrExportPresetCmdBuilder.arg("preset.json").
		saveFileContent("preset.json").
		saveFile("preset.json").
		run()

	presetContent := mixcrExportPresetCmd.getFileContent("preset.json")

	mixcrForBackCmd := exec.builder().
		inLightQueue().
		mem("512MiB").
		software(mixcrSw).
		env("MI_USE_SYSTEM_CA", "true").
		secret("MI_LICENSE", "MI_LICENSE").
		printErrStreamToStdout().
		arg("presetSpecificationsForBack").
		addFile("preset.yaml", mixcrExportPresetCmd.getFile("preset.json")).
		arg("preset.yaml").
		arg("presetForBack.json").
		saveFileContent("presetForBack.json").
		run()

	presetSpecForBackContent := mixcrForBackCmd.getFileContent("presetForBack.json")

	return {
		preset: presetContent,
		presetSpecForBack: presetSpecForBackContent
	}
})
