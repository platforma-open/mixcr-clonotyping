self := import("@platforma-sdk/workflow-tengo:tpl")
smart := import("@platforma-sdk/workflow-tengo:smart")
ll := import("@platforma-sdk/workflow-tengo:ll")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
pcolumn := import("@platforma-sdk/workflow-tengo:pframes.pcolumn")
times := import("times")
text := import("text")
maps := import("@platforma-sdk/workflow-tengo:maps")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
slices := import("@platforma-sdk/workflow-tengo:slices")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
pt := import("@platforma-sdk/workflow-tengo:pt")
qcReportColumns := import(":qc-report-columns")

json := import("json")

self.defineOutputs("qcReportTable")

mixcrSw := assets.importSoftware("@platforma-open/milaboratories.software-mixcr:main")
ptablerSw := assets.importSoftware("@platforma-open/milaboratories.software-ptabler:main")


self.body(func(inputs) {
    clnsData := inputs.clnsData
    presetSpecForBack := inputs.presetSpecForBack
    sampleIdAxisSpec := inputs.sampleIdAxisSpec
    chains := inputs.chains
    library := inputs.library
    isLibraryFileGzipped := inputs.isLibraryFileGzipped

    isSingleCell := len(presetSpecForBack.cellTags) > 0
	hasUmi := !is_undefined(presetSpecForBack.umiTags) && len(presetSpecForBack.umiTags) > 0
    cellTags := presetSpecForBack.cellTags

    chainInfos := {
	"IGHeavy": { mixcrFilter: "IGH", name: "IG Heavy", shortName: "Heavy" },
	"IGLight": { mixcrFilter: "IGK,IGL", name: "IG Light", shortName: "Light" },
	"TCRAlpha": { mixcrFilter: "TRA", name: "TCR Alpha", shortName: "Alpha" },
	"TCRBeta": { mixcrFilter: "TRB", name: "TCR Beta", shortName: "Beta" },
	"TCRGamma": { mixcrFilter: "TRG", name: "TCR Gamma", shortName: "Gamma" },
	"TCRDelta": { mixcrFilter: "TRD", name: "TCR Delta", shortName: "Delta" }
    }

    chainsForMixcr := []

    for chain in chains {
        chainsForMixcr += text.split(chainInfos[chain].mixcrFilter, ",")
    }
    
    // Get all clns files from the input data
    clnsFiles := clnsData.inputs()
    
    // Build the exportReportsTable command
    exportReportCmd := exec.builder().
        software(mixcrSw).
        secret("MI_LICENSE", "MI_LICENSE").
        arg("exportReportsTable")
    
    // Add all clns files as input
    for i, clnsFile in clnsFiles {
        fileName := json.decode(i)[0] + ".clns"
        exportReportCmd.addFile(fileName, clnsFile)
        exportReportCmd.arg(fileName)
    }

    exportReportCmd.arg("qc-report.tsv").saveFile("qc-report.tsv")
    if library {
        if isLibraryFileGzipped {
			exportReportCmd.addFile("library.json.gz", library)
		} else {
			exportReportCmd.addFile("library.json", library)
		}
	}
    
    // Run the command
    result := exportReportCmd.run()

    rawTsvFile := result.getFile("qc-report.tsv")
    
    // Use pTabler to remove ".clns" from fileName column
    wf := pt.workflow().
        inMediumQueue().
        mem("8GiB").
        cpu(2)
    
    // Load the raw TSV file as a DataFrame
    df := wf.frame(rawTsvFile, {
        xsvType: "tsv",
        inferSchema: false
    })
    
        // Add the sampleId column and remove ".clns" from fileName using pTabler string methods
    processedDf := df.withColumns(
        pt.col("fileName").strSlice(0, pt.col("fileName").strLenChars().minus(5)).alias("sampleId")
    )

    // For now, let's just use the processed DataFrame without zero column filtering
    // since the columns() method is not available in this pTabler version
    finalDf := processedDf
    
    // Save the final DataFrame back to TSV
    finalDf.save("qc-report-processed.tsv", {
        xsvType: "tsv"
    })
    
    // Run the pTabler workflow
    wfResult := wf.run()
    
    tsvFile := wfResult.getFile("qc-report-processed.tsv")

    qcReportColumns := qcReportColumns(hasUmi, isSingleCell, sampleIdAxisSpec, chainsForMixcr, cellTags)
    reportColumnsSpec := qcReportColumns.reportColumnsSpec

    qcReportTable := xsv.importFile(
		tsvFile,
		"tsv",
		reportColumnsSpec,
		{ cpu: 1, mem: "16GiB" }
	)

    
    return {
        qcReportTable: qcReportTable
    }
})