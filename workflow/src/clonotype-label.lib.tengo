generateClonotypeLabelSteps := func(clonotypeKeyCol, clonotypeLabelCol, targetTable) {
    prefixTempCol := clonotypeLabelCol + "_prefix_temp"
    rankTempCol := clonotypeLabelCol + "_rank_temp"

    steps := []

    // Add prefix_temp column (digits removed, first 5 chars, uppercased)
    steps = append(steps, {
        type: "add_columns",
        table: targetTable,
        columns: [{
            name: prefixTempCol,
            expression: {
                type: "to_upper",
                value: {
                    type: "substring",
                    value: {
                        type: "str_replace",
                        value: { type: "col", name: clonotypeKeyCol },
                        pattern: "\\d", // Regex for digits
                        replacement: "",
                        replaceAll: true
                    },
                    start: 0,
                    length: 5
                }
            }
        }]
    })

    // Add rank_temp column - rank of the clonotype in the prefixTempCol,
	// used to diversify repeated clonotype labels (due to the birthday paradox)
    steps = append(steps, {
        type: "add_columns",
        table: targetTable,
        columns: [{
            name: rankTempCol,
            expression: {
                type: "rank",
                partitionBy: [{ type: "col", name: prefixTempCol }],
                orderBy: [{ type: "col", name: clonotypeKeyCol }]
            }
        }]
    })

    // Add final clonotypeLabelCol column (C-XXXXX or C-XXXXX-RANK)
    steps = append(steps, {
        type: "add_columns",
        table: targetTable,
        columns: [{
            name: clonotypeLabelCol,
            expression: {
                type: "when_then_otherwise",
                conditions: [
                    {
                        when: {
                            type: "gt",
                            lhs: { type: "col", name: rankTempCol },
                            rhs: { type: "const", value: 1 }
                        },
                        then: {
                            type: "str_join",
                            operands: [
                                { type: "const", value: "C" },
                                { type: "col", name: prefixTempCol },
                                { type: "col", name: rankTempCol }
                            ],
                            delimiter: "-"
                        }
                    }
                ],
                otherwise: {
                    type: "str_join",
                    operands: [
                        { type: "const", value: "C" },
                        { type: "col", name: prefixTempCol }
                    ],
                    delimiter: "-"
                }
            }
        }]
    })

    return steps
}

addClonotypeLabelColumnsPt := func(df, clonotypeKeyCol, clonotypeLabelCol, pt) {
    prefixTempCol := clonotypeLabelCol + "_prefix_temp"
    rankTempCol := clonotypeLabelCol + "_rank_temp"

    // Add prefix_temp column (digits removed, first 5 chars, uppercased)
    df = df.withColumns(
        pt.col(clonotypeKeyCol).
            strReplace("\\d", "", { replaceAll: true }).
            strSlice(0, 5).               // Take first 5 characters
            strToUpper().                 // Convert to uppercase
            alias(prefixTempCol)
    )

    // Add rank_temp column - rank of the clonotypeKeyCol within each prefixTempCol group
    df = df.withColumns(
        pt.rank(pt.col(clonotypeKeyCol)).  // Rank based on clonotypeKeyCol (default ascending)
            over(pt.col(prefixTempCol)).   // Partition by prefixTempCol
            alias(rankTempCol)
    )

    // Add final clonotypeLabelCol column (C-XXXXX or C-XXXXX-RANK)
    df = df.withColumns(
        pt.when(pt.col(rankTempCol).gt(pt.lit(1))).
            then(pt.concatStr([pt.lit("C"), pt.col(prefixTempCol), pt.col(rankTempCol).cast("String")], { delimiter: "-" })).
            otherwise(pt.concatStr([pt.lit("C"), pt.col(prefixTempCol)], { delimiter: "-" })).
            alias(clonotypeLabelCol)
    )

    return df.withoutColumns(prefixTempCol, rankTempCol)
}

export {
	generateClonotypeLabelSteps: generateClonotypeLabelSteps,
    addClonotypeLabelColumnsPt: addClonotypeLabelColumnsPt
}
