//tengo:hash_override 553D3080-FB87-44BC-BEEB-DB9EB5F773D8

ll := import("@platforma-sdk/workflow-tengo:ll")
self := import("@platforma-sdk/workflow-tengo:tpl.light")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
smart := import("@platforma-sdk/workflow-tengo:smart")
slices := import("@platforma-sdk/workflow-tengo:slices")
assets := import("@platforma-sdk/workflow-tengo:assets")
exec := import("@platforma-sdk/workflow-tengo:exec")
pt := import("@platforma-sdk/workflow-tengo:pt")

json := import("json")

self.defineOutputs("tsv", "tsvForSingleCell")

mixcrSw := assets.importSoftware("@platforma-open/milaboratories.software-mixcr:memory-from-limits")

self.body(func(inputs) {
	clnsFile := inputs[pConstants.VALUE_FIELD_NAME]

	params := inputs.params
	library := inputs.library
	isLibraryFileGzipped := params.isLibraryFileGzipped
	chains := params.chains
	exportArgs := params.exportArgs

	clonotypeKeyColumns := params.clonotypeKeyColumns
	clonotypeKeyArgs := params.clonotypeKeyArgs

	cellTagColumns := params.cellTagColumns

	mainAbundanceColumnUnnormalizedArgs := params.mainAbundanceColumnUnnormalizedArgs
	mainIsProductiveArgs := params.mainIsProductiveArgs

	hashKeyDerivationExpressionPt := func(sourceColumns) {
		return pt.concatStr(
			slices.map(sourceColumns, func(colName) { return pt.col(colName).fillNull("") }),
			{ delimiter: "#" }
		).hash("sha256", "base64_alphanumeric", 120)
	}

	// Exporting clones from clns file

	createExport := func(additionalAction) {
		mixcrCmdBuilder := exec.builder().
			inMediumQueue().
			ram("12GiB").
		    cpu(2).
			printErrStreamToStdout().
			dontSaveStdoutOrStderr().
			software(mixcrSw).
			secret("MI_LICENSE", "MI_LICENSE").
			arg("exportClones").
			arg("--dont-split-files").
			arg("--drop-default-fields").
			arg("--reset-export-clone-table-splitting").
			arg("--export-productive-clones-only").
			arg("--chains").arg(chains)

		if library {
			if isLibraryFileGzipped {
				mixcrCmdBuilder.addFile("library.json.gz", library)
			} else {
				mixcrCmdBuilder.addFile("library.json", library)
			}
		}

		additionalAction(mixcrCmdBuilder)

		return mixcrCmdBuilder.
			arg("clones.clns").
			addFile("clones.clns", clnsFile).
			arg("clones.tsv").
			saveFile("clones.tsv").
			cacheHours(3).
			run()
	}

	mixcrCmd := createExport(func(mixcrCmdBuilder) {
		for argGrp in exportArgs {
			for arg in argGrp {
				mixcrCmdBuilder.arg(arg)
			}
		}
	})

	unprocessedTsv := mixcrCmd.getFile("clones.tsv")

	result := {
		tsvForSingleCell: smart.createNullResource()
	}

	if is_undefined(clonotypeKeyColumns) {
		ll.panic("clonotypeKeyColumns is undefined")
	}

	// PTabler processing for main TSV output
	wfMain := pt.workflow().
		inMediumQueue().
		mem("8GiB").
		cpu(2)

	frameInputMap := {
		file: unprocessedTsv,
		xsvType: "tsv",
		schema: [ { column: "readCount", type: "Double" } ]
	}
	dfMain := wfMain.frame(frameInputMap, { inferSchema: false, id: "input_table" })

	dfMain.addColumns(
		pt.col("readCount").round().cast("Long").alias("readCount")
	)
	dfMain.addColumns(
		hashKeyDerivationExpressionPt(clonotypeKeyColumns).alias("clonotypeKey")
	)

	dfMain.save("output.tsv")
	ptablerResultMain := wfMain.run()
	processedTsv := ptablerResultMain.getFile("output.tsv")
	result.tsv = processedTsv

	if !is_undefined(cellTagColumns) {
		mixcrForSingleCell := createExport(func(mixcrCmdBuilder) {
			mixcrCmdBuilder.
				arg("--split-by-tags").arg("Cell").
				arg("-tags").arg("Cell")

			for argGrp in (clonotypeKeyArgs + mainIsProductiveArgs + mainAbundanceColumnUnnormalizedArgs) {
				for arg in argGrp {
					mixcrCmdBuilder.arg(arg)
				}
			}
		})

		unprocessedTsvForSingleCell := mixcrForSingleCell.getFile("clones.tsv")

		// PTabler processing for single-cell TSV output
		wfSingleCell := pt.workflow().
			inMediumQueue().
			mem("4GiB").
			cpu(2)

		dfSingleCell := wfSingleCell.frame(unprocessedTsvForSingleCell, { xsvType: "tsv", inferSchema: false })

		dfSingleCell.addColumns(
			hashKeyDerivationExpressionPt(clonotypeKeyColumns).alias("clonotypeKey"),
			hashKeyDerivationExpressionPt(cellTagColumns).alias("cellKey")
		)

		dfSingleCell.save("output.tsv")
		ptablerResultSingleCell := wfSingleCell.run()
		result.tsvForSingleCell = ptablerResultSingleCell.getFile("output.tsv")
	}

	return result
})
