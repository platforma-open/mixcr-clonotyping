// process

self := import("@platforma-sdk/workflow-tengo:tpl")
render := import("@platforma-sdk/workflow-tengo:render")
ll := import("@platforma-sdk/workflow-tengo:ll")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
slices := import("@platforma-sdk/workflow-tengo:slices")
maps := import("@platforma-sdk/workflow-tengo:maps")
sets := import("@platforma-sdk/workflow-tengo:sets")
anonymize := import("@platforma-sdk/workflow-tengo:anonymize")

calculateExportSpecs := import(":calculate-export-specs")

json := import("json")
text := import("text")
times := import("times")

mixcrAnalyzeTpl := assets.importTemplate(":mixcr-analyze")
mixcrExportTpl := assets.importTemplate(":mixcr-export")
aggregateByClonotypeKeyTpl := assets.importTemplate(":aggregate-by-clonotype-key")
exportReportTpl := assets.importTemplate(":export-report")
processSingleCellTpl := assets.importTemplate(":process-single-cell")

self.awaitState("InputsLocked")
self.awaitState("params", "ResourceReady")
self.awaitState("inputSpec", "ResourceReady")
self.awaitState("presetSpecForBack", "ResourceReady")
self.awaitState("presetContent", "ResourceReady")

chainInfos := {
	"IGHeavy": { mixcrFilter: "IGH", name: "IG Heavy", shortName: "Heavy" },
	"IGLight": { mixcrFilter: "IGK,IGL", name: "IG Light", shortName: "Light" },
	"TCRAlpha": { mixcrFilter: "TRA", name: "TCR Alpha", shortName: "Alpha" },
	"TCRBeta": { mixcrFilter: "TRB", name: "TCR Beta", shortName: "Beta" },
	"TCRGamma": { mixcrFilter: "TRG", name: "TCR Gamma", shortName: "Gamma" },
	"TCRDelta": { mixcrFilter: "TRD", name: "TCR Delta", shortName: "Delta" }
}

// Chain with higher diversity go first
receptorInfos := {
	"IG": { chains: ["IGHeavy", "IGLight"], name: "IG" },
	"TCRAB": { chains: ["TCRBeta", "TCRAlpha"], name: "TCR Alpha/Beta" }, // TODO αβ ?
	"TCRGD": { chains: ["TCRDelta", "TCRGamma"], name: "TCR Gamma/Delta" } // TODO γδ ?
}

transformSpecs := func(columns, additionalSpec) {
	return slices.map(columns, func(columnSpec) {
		return maps.deepTransform(columnSpec, additionalSpec)
	})
}

self.body(func(inputs) {

	inputSpec := inputs.inputSpec
	library := inputs.library

	preset := inputs.preset
	presetSpecForBack := inputs.presetSpecForBack.getDataAsJson()
	presetContent := inputs.presetContent

	params := inputs.params
	species := params.species
	// can be either receptors or chains
	receptorsOrChains := params.receptorsOrChains
	limitInput := params.limitInput
	perProcessMemGB := params.perProcessMemGB
	perProcessCPUs := params.perProcessCPUs
	blockId := params.blockId
	libraryId := params.libraryId
	presetCommonName := params.presetCommonName
	isLibraryFileGzipped := params.isLibraryFileGzipped

	sampleIdAxisSpec := inputSpec.axesSpec[0]

	if is_undefined(presetSpecForBack) {
		ll.panic("no presetSpecForBack")
	}

	reports := []

	for step in presetSpecForBack.reportTypes {
		if step == "align" || step == "assemble" {
			reports = append(reports, {
				id: step,
				fileJson: "result." + step + ".report.json",
				fileTxt: "result." + step + ".report.txt"
			})
		}
	}

	hasAssembleContigs := false
	hasAssembleCells := false
	for stage in presetSpecForBack.analysisStages {
		if stage == "assembleContigs" {
			hasAssembleContigs = true
		} else if stage == "assembleCells" {
			hasAssembleCells = true
		}
	}
	isSingleCell := len(presetSpecForBack.cellTags) > 0
	hasUmi := !is_undefined(presetSpecForBack.umiTags) && len(presetSpecForBack.umiTags) > 0

	// calculating clns annotations

	joinOrUndefined := func(arr) {
		if is_undefined(arr) {
			return undefined
		} else {
			return text.join(arr, ",")
		}
	}

	removeUndefined := func(m) {
		r := {}
		for k, v in m {
			if !is_undefined(v) {
				r[k] = v
			}
		}
		return r;
	}

	clnsAnnotations := removeUndefined({
		"mixcr.com/assemblingFeature": joinOrUndefined(presetSpecForBack.assemblingFeature),
		"mixcr.com/cellTags": joinOrUndefined(presetSpecForBack.cellTags),
		"mixcr.com/coveredFeaturesOnExport": joinOrUndefined(presetSpecForBack.coveredFeaturesOnExport),
		"mixcr.com/umiTags": joinOrUndefined(presetSpecForBack.umiTags),
		"pl7.app/label": "MiXCR Clonesets"
	})
	if libraryId {
		clnsAnnotations["pl7.app/vdj/libraryId"] = libraryId
	}
	if hasAssembleContigs {
		clnsAnnotations["mixcr.com/contigsAssembled"] = "true"
	}
	if hasAssembleCells {
		clnsAnnotations["mixcr.com/cellsAssembled"] = "true"
	}

	fileExtension := inputSpec.domain["pl7.app/fileExtension"]

	targetOutputs := [ {
		type: "Resource",
		spec: {
			kind: "PColumn",
			valueType: "File",
			name: "mixcr.com/qc",
			domain: {
				"pl7.app/vdj/clonotypingRunId": blockId
			}
		},
		name: "qc"
	}, {
		type: "Resource",
		spec: {
			kind: "PColumn",
			name: "pl7.app/log",
			domain: {
				"pl7.app/vdj/clonotypingRunId": blockId
			},
			valueType: "Log"
		},
		name: "log"
	}, {
		type: "Resource",
		spec: {
			kind: "PColumn",
			name: "mixcr.com/clns",
			domain: {
				"pl7.app/vdj/clonotypingRunId": blockId
			},
			annotations: clnsAnnotations,
			valueType: "File"
		},
		name: "clns"
	}, {
		type: "ResourceMap",
		name: "reports",
		spec: {
			kind: "PColumn",
			name: "mixcr.com/report",
			domain: {
				"pl7.app/vdj/clonotypingRunId": blockId
			},
			valueType: "File",
			axesSpec: [ {
				type: "String",
				name: "mixcr.com/report/source",
				annotations: {
					"pl7.app/label": "Source MiXCR stage"
				}
			}, {
				type: "String",
				name: "mixcr.com/report/format",
				annotations: {
					"pl7.app/label": "Report format"
				},
				domain: {
					"pl7.app/dense": string(json.encode(["json", "txt"]))
				}
			} ]
		}
	} ]

	exportSpecs := calculateExportSpecs(presetSpecForBack, sampleIdAxisSpec, blockId)

	columnsSpecPerSample := exportSpecs.columnsSpecPerSample
	columnsSpecPerSampleSc := exportSpecs.columnsSpecPerSampleSc
	columnsSpecPerClonotypeNoAggregates := exportSpecs.columnsSpecPerClonotypeNoAggregates
	columnsSpecPerClonotypeAggregates := exportSpecs.columnsSpecPerClonotypeAggregates
	columnsSpecPerClonotypeSc := exportSpecs.columnsSpecPerClonotypeSc

	clonotypeKeyColumns := exportSpecs.clonotypeKeyColumns
	clonotypeKeyArgs := exportSpecs.clonotypeKeyArgs
	cellTagColumns := exportSpecs.cellTagColumns

	// axesByClonotypeId := exportSpecs.axesByClonotypeId

	// function with chain argument
	axisByClonotypeKeyGen := exportSpecs.axisByClonotypeKeyGen
	// function with receptor argument
	axisByScClonotypeKeyGen := exportSpecs.axisByScClonotypeKeyGen

	exportArgs := exportSpecs.exportArgs

	mainIsProductiveColumn := exportSpecs.mainIsProductiveColumn
	mainIsProductiveArgs := exportSpecs.mainIsProductiveArgs

	mainAbundanceColumnNormalized := exportSpecs.mainAbundanceColumnNormalized
	mainAbundanceColumnUnnormalized := exportSpecs.mainAbundanceColumnUnnormalized
	mainAbundanceColumnNormalizedArgs := exportSpecs.mainAbundanceColumnNormalizedArgs
	mainAbundanceColumnUnnormalizedArgs := exportSpecs.mainAbundanceColumnUnnormalizedArgs

	hashCellKey := exportSpecs.hashCellKey
	// function with receptor argument
	cellLinkerColumnSettingsGen := exportSpecs.cellLinkerColumnSettingsGen

	mixcrResults := pframes.processColumn(
		{ spec: inputSpec, data: inputs.inputData },
		mixcrAnalyzeTpl,
		targetOutputs,
		{
			aggregate: [{
				name: "pl7.app/sequencing/lane",
				optional: true
			}, {
				name: "pl7.app/sequencing/readIndex",
				optional: true
			}],

			// resulting aggregation axes names will be checked against supported combinations
			// in the body template
			passAggregationAxesNames: true,

			// this will cache each individual step result for 30 minutes, even if execution of some of the steps
			// failed or whole execution was interrupted
			stepCache: 30 * times.minute,

			// will be automatically propagated to all output specs
			traceSteps: [{type: "milaboratories.mixcr-clonotyping", id: blockId, importance: 20, label: "MiXCR " + presetCommonName}],

			extra: {
				preset: preset,
				params: {
					species: species,
					limitInput: limitInput,
					fileExtension: fileExtension,
					reports: reports,
					isLibraryFileGzipped: isLibraryFileGzipped
				},
				library: library,
				presetContent: presetContent
			},

			// by passing those parameters as meta fields we allow for recovery and deduplication mechanisms
			// to pick up the results from executions with different values for CPU and Memory overrides
            metaExtra: {
                perProcessMemGB: perProcessMemGB,
                perProcessCPUs: perProcessCPUs
            }
		}
	)

	clnsFiles := mixcrResults.output("clns")

	clonotypes := pframes.pFrameBuilder()

	chains := []
	receptors := []

	for chainOrReceptor in receptorsOrChains {
		if receptorInfos[chainOrReceptor] != undefined {
			receptors += [chainOrReceptor]
			chains += receptorInfos[chainOrReceptor].chains
		} else {
			if is_undefined(chainInfos[chainOrReceptor]) {
				ll.panic("chainInfo not found for %v", chainOrReceptor)
			}
			if len(receptors) > 0 {
				ll.panic("mixing receptors and chains is not allowed")
			}
			chains += [chainOrReceptor]
		}
	}

	perChainResults := {}

	// mapping removing duplicates
	columnsToSchema := func(columns) {
		schema := []
		columnsAdded := {}
		for col in columns {
			if !columnsAdded[col.column] {
				schema += [ { column: col.column, type: col.spec.valueType } ]
				columnsAdded[col.column] = true
			}
		}
		return schema
	}

	resultsToCache := {}

	for chain in chains {
		chainInfo := chainInfos[chain]
		ll.assert(!is_undefined(chainInfo), "chainInfo not found for chain %v", chain)

		//
		// Exporting CLNS -> TSV
		//

		exportOutputs := [ {
			type: "Resource",
			spec: {
				kind: "PColumn",
				name: "mixcr.com/clonotypeTable",
				domain: {
					"pl7.app/vdj/clonotypingRunId": blockId
				},
				valueType: "File"
			},
			name: "clonotypeTable",
			path: ["tsv"]
		} ]

		if !isSingleCell {
			// only adding data outputs if we are in bulk mode
			exportOutputs += [ {
				type: "Xsv",
				xsvType: "tsv",
				settings: {
					axes: [ axisByClonotypeKeyGen(chain) ],
					columns: columnsSpecPerSample,
					storageFormat: "Binary",
					partitionKeyLength: 0
				},
				mem: "16GiB",
				cpu: 2,
				name: "byCloneKeyBySample",
				path: ["tsv"]
			} ]
		}

		if isSingleCell {
			exportOutputs += [ {
				type: "Resource",
				spec: {
					kind: "PColumn",
					name: "mixcr.com/clonotypeTableForSingleCell",
					domain: {
						"pl7.app/vdj/clonotypingRunId": blockId,
						"pl7.app/vdj/chain": chain
					},
					valueType: "File"
				},
				name: "clonotypeTableForSingleCell",
				path: ["tsvForSingleCell"]
			} ]
		}

		exportResults := pframes.processColumn(
			clnsFiles,
			mixcrExportTpl,
			exportOutputs,
			{
				// will be automatically propagated to all output specs
				traceSteps: isSingleCell ? [] : [{type: "milaboratories.mixcr-clonotyping.export", id: blockId + "." + chain, importance: 80, label: chainInfo.name}],

				// this will cache each individual step result for 30 minutes, even if execution of some of the steps
				// failed or whole execution was interrupted
				stepCache: 30 * times.minute,

				extra: {
					params: maps.clone({
						chains: chainInfo.mixcrFilter,
						clonotypeKeyColumns: clonotypeKeyColumns,
						clonotypeKeyArgs: clonotypeKeyArgs,

						mainIsProductiveColumn: mainIsProductiveColumn,
						mainIsProductiveArgs: mainIsProductiveArgs,
						mainAbundanceColumnNormalized: mainAbundanceColumnNormalized,
						mainAbundanceColumnUnnormalized: mainAbundanceColumnUnnormalized,
						mainAbundanceColumnNormalizedArgs: mainAbundanceColumnNormalizedArgs,
						mainAbundanceColumnUnnormalizedArgs: mainAbundanceColumnUnnormalizedArgs,

						cellTagColumns: cellTagColumns,
						hashCellKey: hashCellKey,

						mainAbundanceColumnIsReadCount: (!is_undefined(cellTagColumns) && len(cellTagColumns) > 0 && mainAbundanceColumnUnnormalized == "readCount") ? true : undefined,

						exportArgs: exportArgs,
						isLibraryFileGzipped: isLibraryFileGzipped
					}, { removeUndefs: true }),
					library: library
				}
			}
		)

		//
		// Aggregating the data to produce:
		//   [clonotypeKey] -> properties
		// from:
		//   [sampleId, clonotypeKey] -> properties
		//

		aggregationOutputs := [ {
			type: "Resource",
			spec: {
				kind: "PColumn",
				name: "mixcr.com/clonotypeProperties",
				domain: {
					"pl7.app/vdj/clonotypingRunId": blockId
				},
				valueType: "File"
			},
			name: "clonotypeProperties",
			path: ["tsv"]
		} ]

		if !isSingleCell {
			aggregationOutputs += [ {
				type: "Xsv",
				xsvType: "tsv",
				settings: {
					axes: [ axisByClonotypeKeyGen(chain) ],
					columns: columnsSpecPerClonotypeNoAggregates + columnsSpecPerClonotypeAggregates,
					storageFormat: "Binary",
					partitionKeyLength: 0
				},
				mem: "24GiB",
				cpu: 2,
				name: "byCloneKey",
				path: ["tsv"]
			} ]
		}

		resultsToCache["clonotypeTable/" + chain] = exportResults.outputData("clonotypeTable")

		aggregateByCloneKey := pframes.processColumn(
			exportResults.output("clonotypeTable"),
			aggregateByClonotypeKeyTpl,
			aggregationOutputs,
			{
				aggregate: [ {
					name: "pl7.app/sampleId",
					anonymize: true
				} ],

				// this will cache each individual step result for 30 minutes, even if execution of some of the steps
				// failed or whole execution was interrupted
				stepCache: 30 * times.minute,

				extra: {
					params: {
						mainAbundanceColumnNormalized: mainAbundanceColumnNormalized,
						mainAbundanceColumnUnnormalized: mainAbundanceColumnUnnormalized,
						schemaPerClonotypeNoAggregates: columnsToSchema(columnsSpecPerClonotypeNoAggregates),
						schemaPerClonotypeAggregates: columnsToSchema(columnsSpecPerClonotypeAggregates),
						schemaPerSample: columnsToSchema(columnsSpecPerSample)
					}
				}
			}
		)

		if isSingleCell {
			// collecting results for future single cell processing
			perChainResults[chain] = {
				tsvForSingleCell: exportResults.output("clonotypeTableForSingleCell"),
				clonotypeProperties: aggregateByCloneKey.output("clonotypeProperties")
			}

			// caching intermediate results until the block is removed
			resultsToCache["clonotypeTableForSingleCell/" + chain] = exportResults.outputData("clonotypeTableForSingleCell")
			resultsToCache["clonotypeProperties/" + chain] = aggregateByCloneKey.outputData("clonotypeProperties")
		} else {
			// only adding data outputs if we are in bulk mode
			exportResults.addXsvOutputToBuilder(clonotypes, "byCloneKeyBySample", "byCloneKeyBySample/" + chain + "/")
			aggregateByCloneKey.addXsvOutputToBuilder(clonotypes, "byCloneKey", "byCloneKey/" + chain + "/")
		}
	}

	if isSingleCell {
		for receptor in receptors {
			receptorInfo := receptorInfos[receptor]

			singleCellOutputs := [ {
				type: "Resource",
				spec: {
					kind: "PColumn",
					name: "mixcr.com/singleCellAbundanceTable",
					domain: {
						"pl7.app/vdj/clonotypingRunId": blockId
					},
					valueType: "File"
				},
				name: "abundanceTsv",
				path: ["abundanceTsv"]
			}, {
				type: "Xsv",
				xsvType: "tsv",
				settings: {
					axes: [ {
						column: "sampleId",
						spec: sampleIdAxisSpec
					}, axisByScClonotypeKeyGen(receptor) ],
					columns: columnsSpecPerSampleSc,
					storageFormat: "Binary",
					partitionKeyLength: 1
				},
				mem: "16GiB",
				cpu: 2,
				name: "abundanceTable",
				path: ["abundanceTsv"]
			}, {
				type: "Xsv",
				xsvType: "tsv",
				settings: {
					axes: [ axisByScClonotypeKeyGen(receptor) ],
					columns: columnsSpecPerClonotypeSc,
					storageFormat: "Binary"
				},
				mem: "12GiB",
				cpu: 2,
				name: "aggregates",
				path: ["clonotypeTsv"]
			} ]

			//removing columns from secondary chain except aaSeqCDR3
			columnsSpecPerClonotypeSecondary := []
			for col in columnsSpecPerClonotypeNoAggregates {
				if col.column == "aaSeqCDR3" {
					columnsSpecPerClonotypeSecondary += [ col ]
				}
			}
			for chainIdx in [0, 1] {
				// "A" chain is always the one that is more diverse
				chainLetterU := ["A", "B"][chainIdx]
				chainNameU := chainInfos[receptorInfo.chains[chainIdx]].shortName
				chainNameL := text.to_lower(chainNameU)

				for isPrimary in [true, false] {
					pPrefixU := isPrimary ? "Primary" : "Secondary"
					pPrefixL := text.to_lower(pPrefixU)

 					// i.e. propertiesAPrimary
					propertiesTableName := "properties" + chainLetterU + pPrefixU
					// i.e. propertiesAPrimaryTsv
					propertiesTsvOutputName := propertiesTableName + "Tsv"

					annotationsTransformation := {
						"pl7.app/label": func(label) {
							return chainNameU + " " + label + " " + pPrefixU
						}
					}

					if !isPrimary {
						annotationsTransformation["pl7.app/table/visibility"] = "optional"
					}

					singleCellOutputs += [ {
						type: "Resource",
						spec: {
							kind: "PColumn",
							name: "mixcr.com/scClonotypeTable/" + chainNameL + pPrefixU,
							domain: {
								"pl7.app/vdj/receptor": receptor,
								"pl7.app/vdj/scClonotypeChain": chainLetterU,
								"pl7.app/vdj/scClonotypeChain/index": pPrefixL,
								"pl7.app/vdj/clonotypingRunId": blockId
							},
							valueType: "File"
						},
						name: propertiesTsvOutputName,
						path: [ propertiesTsvOutputName ]
					}, {
						type: "Xsv",
						xsvType: "tsv",
						settings: {
							axes: [ axisByScClonotypeKeyGen(receptor) ],
							columns: transformSpecs(isPrimary ? columnsSpecPerClonotypeNoAggregates : columnsSpecPerClonotypeSecondary, {
								spec: {
									domain: {
										"pl7.app/vdj/scClonotypeChain": chainLetterU,
										"pl7.app/vdj/scClonotypeChain/index": pPrefixL
									},
									annotations: annotationsTransformation
								}
							}),
							storageFormat: "Binary",
							partitionKeyLength: 0
						},
						mem: "24GiB",
						cpu: 2,
						name: propertiesTableName,
						path: [ propertiesTsvOutputName ]
					} ]
				}
			}

			singleCellOutputs += [ {
				type: "Xsv",
				xsvType: "tsv",
				settings: cellLinkerColumnSettingsGen(receptor),
				mem: "16GiB",
				cpu: 2,
				name: "cellsLinkerTable",
				path: ["cellsTsv"]
			} ]

			chainA := receptorInfo.chains[0]
			chainB := receptorInfo.chains[1]

			// Using A chain files as main PColumn for xsv conversion through pframes.processColumn.
			// Since we aggregate by sample, this is just a single pass through the data.

			// manual data anonymization
			anonymizationResult := anonymize.anonymizePKeys({
				byCellTagAData: perChainResults[chainA].tsvForSingleCell.data,
				byCellTagBData: perChainResults[chainB].tsvForSingleCell.data
			}, [0])
			byCellTagAData := anonymizationResult.result.byCellTagAData
			byCellTagBData := anonymizationResult.result.byCellTagBData

			singleCellResult := pframes.processColumn(
				{ spec: perChainResults[chainA].tsvForSingleCell.spec, data: byCellTagAData },
				processSingleCellTpl,
				singleCellOutputs,
				{
					aggregate: ["pl7.app/sampleId"],
					traceSteps: [{type: "milaboratories.mixcr-clonotyping.processSingleCell", id: blockId + "." + receptor, importance: 80, label: receptorInfo.name}],
					extra: {
						byCellTagB: byCellTagBData,
						propertiesA: perChainResults[chainA].clonotypeProperties.data,
						propertiesB: perChainResults[chainB].clonotypeProperties.data,
						params: {
							mainAbundanceColumn: mainAbundanceColumnUnnormalized,
							mainIsProductiveColumn: mainIsProductiveColumn,
							schemaPerClonotypeNoAggregates: columnsToSchema(columnsSpecPerClonotypeNoAggregates)
						}
					}
				}
			)

			// singleCellResult.addXsvOutputToBuilder(clonotypes, "abundanceTable", "clonotypeProperties/abundance/" + receptor + "/")
			for columnName in singleCellResult.listXsvColumns("abundanceTable") {
				anonymizedData := singleCellResult.outputData("abundanceTable", columnName)
				clonotypes.add(
					"clonotypeProperties/abundance/" + receptor + "/" + columnName,
					singleCellResult.outputSpec("abundanceTable", columnName),
					anonymize.deanonymizePKeys(anonymizedData, 0, [0], anonymizationResult.mapping)
				)
				resultsToCache["clonotypeProperties/abundance/" + receptor + "/" + columnName] = anonymizedData
			}
			singleCellResult.addXsvOutputToBuilder(clonotypes, "aggregates", "clonotypeProperties/aggregates/" + receptor + "/")

			singleCellResult.addXsvOutputToBuilder(clonotypes, "propertiesAPrimary", "clonotypeProperties/" + receptor + "/aPrimary/")
			singleCellResult.addXsvOutputToBuilder(clonotypes, "propertiesASecondary", "clonotypeProperties/" + receptor + "/aSecondary/")
			singleCellResult.addXsvOutputToBuilder(clonotypes, "propertiesBPrimary", "clonotypeProperties/" + receptor + "/bPrimary/")
			singleCellResult.addXsvOutputToBuilder(clonotypes, "propertiesBSecondary", "clonotypeProperties/" + receptor + "/bSecondary/")

			for columnName in singleCellResult.listXsvColumns("cellsLinkerTable") {
				anonymizedData := singleCellResult.outputData("cellsLinkerTable", columnName)
				clonotypes.add(
					"clonotypeProperties/" + receptor + "/cellsLinkerTable/" + columnName,
					singleCellResult.outputSpec("cellsLinkerTable", columnName),
					anonymize.deanonymizePKeys(anonymizedData, 0, [0], anonymizationResult.mapping)
				)
				resultsToCache["clonotypeProperties/" + receptor + "/cellsLinkerTable/" + columnName] = anonymizedData
			}
		}
	}

	qcReportTable := render.create(exportReportTpl, {
		clnsData: mixcrResults.outputData("clns"),
		presetSpecForBack: presetSpecForBack,
		sampleIdAxisSpec: sampleIdAxisSpec,
		chains: chains,
		library: library,
		isLibraryFileGzipped: isLibraryFileGzipped
	})

	return {
		"qc.spec": mixcrResults.outputSpec("qc"),
		"qc.data": mixcrResults.outputData("qc"),

		"logs.spec": mixcrResults.outputSpec("log"),
		"logs.data": mixcrResults.outputData("log"),

		"reports.spec": mixcrResults.outputSpec("reports"),
		"reports.data": mixcrResults.outputData("reports"),

		"clns.spec": mixcrResults.outputSpec("clns"),
		"clns.data": mixcrResults.outputData("clns"),

		"resultsToCache": resultsToCache,

		clonotypes: clonotypes.build(),
		qcReportTable: qcReportTable.output("qcReportTable")
	}
})
