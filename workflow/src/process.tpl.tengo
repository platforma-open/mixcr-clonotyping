// process

self := import("@platforma-sdk/workflow-tengo:tpl")

ll := import("@platforma-sdk/workflow-tengo:ll")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
smart := import("@platforma-sdk/workflow-tengo:smart")
slices := import("@platforma-sdk/workflow-tengo:slices")
file := import("@platforma-sdk/workflow-tengo:file")
llPFrames := import("@platforma-sdk/workflow-tengo:pframes.ll")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
pUtil := import("@platforma-sdk/workflow-tengo:pframes.util")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")

calculateExportSpecs := import(":calculate-export-specs")

json := import("json")
text := import("text")

mixcrAnalyzeTpl := assets.importTemplate(":mixcr-analyze")
mixcrExportTpl := assets.importTemplate(":mixcr-export")
aggregateByClonotypeKeyTpl := assets.importTemplate(":aggregate-by-clonotype-key")

self.awaitState("InputsLocked")
self.awaitState("params", "ResourceReady")
self.awaitState("inputSpec", "ResourceReady")
self.awaitState("presetSpecForBack", "ResourceReady")
self.awaitState("presetContent", "ResourceReady")

self.body(func(inputs) {

	inputSpec := inputs.inputSpec
	library := inputs.library

	preset := inputs.preset
	presetSpecForBack := inputs.presetSpecForBack.getDataAsJson()
	presetContent := inputs.presetContent

	params := inputs.params
	species := params.species
	chains := params.chains
	limitInput := params.limitInput
	blockId := params.blockId
	presetCommonName := params.presetCommonName
	isLibraryFileGzipped := params.isLibraryFileGzipped


	if is_undefined(presetSpecForBack) {
		ll.panic("no presetSpecForBack")
	}

	reports := []

	for step in presetSpecForBack.reportTypes {
		if step == "align" || step == "assemble" {
			reports = append(reports, {
				id: step,
				fileJson: "result." + step + ".report.json",
				fileTxt: "result." + step + ".report.txt"
			})
		}
	}

	hasAssembleContigs := false
	hasAssembleCells := false
	for stage in presetSpecForBack.analysisStages {
		if stage == "assembleContigs" {
			hasAssembleContigs = true
		} else if stage == "assembleCells" {
			hasAssembleCells = true
		}
	}

	// calculating clns annotations

	joinOrUndefined := func(arr) {
		if is_undefined(arr) {
			return undefined
		} else {
			return text.join(arr, ",")
		}
	}

	removeUndefined := func(m) {
		r := {}
		for k, v in m {
			if !is_undefined(v) {
				r[k] = v
			}
		}
		return r;
	}

	clnsAnnotations := removeUndefined({
		"mixcr.com/assemblingFeature": joinOrUndefined(presetSpecForBack.assemblingFeature),
		"mixcr.com/cellTags": joinOrUndefined(presetSpecForBack.cellTags),
		"mixcr.com/coveredFeaturesOnExport": joinOrUndefined(presetSpecForBack.coveredFeaturesOnExport),
		"mixcr.com/umiTags": joinOrUndefined(presetSpecForBack.umiTags),
		"pl7.app/label": "MiXCR Clonesets"
	})
	if hasAssembleContigs {
		clnsAnnotations["mixcr.com/contigsAssembled"] = "true"
	}
	if hasAssembleCells {
		clnsAnnotations["mixcr.com/cellsAssembled"] = "true"
	}

	fileExtension := inputSpec.domain["pl7.app/fileExtension"]

	targetOutputs := [ {
		type: "Resource",
		spec: {
			kind: "PColumn",
			valueType: "File",
			name: "mixcr.com/qc",
			domain: {
				"pl7.app/blockId": blockId
			}
		},
		name: "qc"
	}, {
		type: "Resource",
		spec: {
			kind: "PColumn",
			name: "pl7.app/log",
			domain: {
				"pl7.app/blockId": blockId
			},
			valueType: "Log"
		},
		name: "log"
	}, {
		type: "Resource",
		spec: {
			kind: "PColumn",
			name: "mixcr.com/clns",
			domain: {
				"pl7.app/blockId": blockId
			},
			annotations: clnsAnnotations,
			valueType: "File"
		},
		name: "clns"
	}, {
		type: "ResourceMap",
		name: "reports",
		spec: {
			kind: "PColumn",
			name: "mixcr.com/report",
			domain: {
				"pl7.app/blockId": blockId
			},
			valueType: "File",
			axesSpec: [ {
				type: "String",
				name: "mixcr.com/report/source",
				annotations: {
					"pl7.app/label": "Source MiXCR stage"
				}
			}, {
				type: "String",
				name: "mixcr.com/report/format",
				annotations: {
					"pl7.app/label": "Report format"
				},
				domain: {
					"pl7.app/dense": string(json.encode(["json", "txt"]))
				}
			} ]
		}
	} ]

	exportSpecs := calculateExportSpecs(presetSpecForBack, blockId)

	columnsSpecPerSample := exportSpecs.columnsSpecPerSample
	columnsSpecPerClonotype := exportSpecs.columnsSpecPerClonotype
	columnsSpec := exportSpecs.columnsSpec

	clonotypeKeyColumns := exportSpecs.clonotypeKeyColumns

	axesByClonotypeId := exportSpecs.axesByClonotypeId
	axesByClonotypeKey := exportSpecs.axesByClonotypeKey

	exportArgs := exportSpecs.exportArgs

	mainAbundanceColumn := exportSpecs.mainAbundanceColumn

	mixcrResults := pframes.processColumn(
		{ spec: inputSpec, data: inputs.inputData },
		mixcrAnalyzeTpl,
		targetOutputs,
		{
			aggregate: [{
				name: "pl7.app/sequencing/lane",
				optional: true
			}, {
				name: "pl7.app/sequencing/readIndex",
				optional: true
			}],
			// resulting aggregation axes names will be checked against supported combinations
			// in the body template
			passAggregationAxesNames: true,

			// will be automatically propagated to all output specs
			traceSteps: [{type: "milaboratories.mixcr-clonotyping", id: blockId, importance: 20, label: "MiXCR " + presetCommonName}],

			extra: {
				preset: preset,
				params: {
					species: species,
					limitInput: limitInput,
					fileExtension: fileExtension,
					reports: reports,
					isLibraryFileGzipped: isLibraryFileGzipped
				},
				library: library,
				presetContent: presetContent
			}
		}
	)

	clnsFiles := mixcrResults.output("clns")

	clonotypes := pframes.pFrameBuilder()

	for chain in chains {
		exportOutputs := [ {
			type: "Resource",
			spec: {
				kind: "PColumn",
				name: "mixcr.com/clonotypeTable",
				domain: {
					"pl7.app/blockId": blockId
				},
				valueType: "File"
			},
			name: "clonotypeTable",
			path: ["tsv"]
		// }, {
		// 	type: "Xsv",
		// 	xsvType: "tsv",
		// 	settings: {
		// 		axes: axesByClonotypeId,
		// 		columns: columnsSpec,
		// 		storageFormat: "Binary",
		// 		partitionKeyLength: 0
		// 	},
		// 	name: "byCloneId",
		// 	path: ["tsv"]
		} ]

		if !is_undefined(axesByClonotypeKey) {
			exportOutputs += [ {
				type: "Xsv",
				xsvType: "tsv",
				settings: {
					axes: axesByClonotypeKey,
					columns: columnsSpecPerSample,
					storageFormat: "Binary",
					partitionKeyLength: 0
				},
				name: "byCloneKeyBySample",
				path: ["tsv"]
			} ]
		}

		exportResults := pframes.processColumn(
			clnsFiles,
			mixcrExportTpl,
			exportOutputs,
			{
				// will be automatically propagated to all output specs
				traceSteps: [{type: "milaboratories.mixcr-clonotyping.export", id: blockId + "." + chain.name, importance: 80, label: chain.name}],

				extra: {
					params: {
						chains: chain.mixcrChain,
						clonotypeKeyColumns: clonotypeKeyColumns,
						exportArgs: exportArgs
					}
				}
			}
		)

		// exportResults.addXsvOutputToBuilder(clonotypes, "byCloneId", "byCloneId/" + chain.name + "/")
		exportResults.addXsvOutputToBuilder(clonotypes, "byCloneKeyBySample", "byCloneKeyBySample/" + chain.name + "/")

		aggregationOutputs := [ {
			type: "Xsv",
			xsvType: "tsv",
			settings: {
				axes: axesByClonotypeKey,
				columns: columnsSpecPerClonotype,
				storageFormat: "Binary",
				partitionKeyLength: 0
			},
			name: "byCloneKey",
			path: ["tsv"]
		} ]

		aggregateByCloneKey := pframes.processColumn(
			exportResults.output("clonotypeTable"),
			aggregateByClonotypeKeyTpl,
			aggregationOutputs,
			{
				aggregate: ["pl7.app/sampleId"],
				extra: {
					params: {
						mainAbundanceColumn: mainAbundanceColumn,
						clonotypeColumns: slices.map(columnsSpecPerClonotype, func(col) {
							return col.column
						})
					}
				}
			}
		)

		aggregateByCloneKey.addXsvOutputToBuilder(clonotypes, "byCloneKey", "byCloneKey/" + chain.name + "/")
	}

	return {
		"qc.spec": mixcrResults.outputSpec("qc"),
		"qc.data": mixcrResults.outputData("qc"),

		"logs.spec": mixcrResults.outputSpec("log"),
		"logs.data": mixcrResults.outputData("log"),

		"reports.spec": mixcrResults.outputSpec("reports"),
		"reports.data": mixcrResults.outputData("reports"),

		"clns.spec": mixcrResults.outputSpec("clns"),
		"clns.data": mixcrResults.outputData("clns"),

		clonotypes: clonotypes.build()
	}
})
