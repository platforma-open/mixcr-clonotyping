wf := import("@platforma-sdk/workflow-tengo:workflow")

render := import("@platforma-sdk/workflow-tengo:render")

maps := import("@platforma-sdk/workflow-tengo:maps")
ll := import("@platforma-sdk/workflow-tengo:ll")
assets := import("@platforma-sdk/workflow-tengo:assets")
smart := import("@platforma-sdk/workflow-tengo:smart")
file := import("@platforma-sdk/workflow-tengo:file")
llPFrames := import("@platforma-sdk/workflow-tengo:pframes.ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
exec := import("@platforma-sdk/workflow-tengo:exec")
self := import("@platforma-sdk/workflow-tengo:tpl")

json := import("json")

calculatePresetInfoTpl := assets.importTemplate(":calculate-preset-info")
processTpl := assets.importTemplate(":process")

wf.setPreRun(assets.importTemplate(":prerun"))

wf.prepare(func(args){
	return{
		resolvedLibraryInput: wf.resolve(args.inputLibrary, { errIfMissing: false })
	}
})

wf.body(func(args) {
	// (begin) @TODO To be moved to SDK / Model

	fileImports := {}

	importFile := func(importHandle) {
		fromMap := fileImports[importHandle]
		if fromMap == undefined {
			fImport := file.importFile(importHandle)
			fileImports[importHandle] = fImport
			return fImport.file
		} else {
			return fromMap.file
		}
	}

	// (end)

	blockId := wf.blockId().getDataAsJson()

	inputRef := args.input

	preset := args.preset

	// file or json with preset name
	presetResource := undefined

	if preset.type == "file" {
		presetResource = importFile(preset.file)
	} else {
		ll.assert(preset.type == "name", "unexpected preset type")
		// whole json, including type
		presetResource = smart.createJsonResource(preset)
	}

	limitInput := args.limitInput
	isLibraryFileGzipped := false

	library := false
	species := args.species
	libraryImportHandle := undefined
	if !is_undefined(args.resolvedLibraryInput) {
		library = args.resolvedLibraryInput.data
		librarySpec := args.resolvedLibraryInput.spec
		species = librarySpec["annotations"]["pl7.app/species"]
	} else if !is_undefined(args.libraryFile) {
		fImport := file.importFile(args.libraryFile)
		libraryImportHandle = fImport.handle
		library = fImport.file
		species = args.customSpecies
		isLibraryFileGzipped = args.isLibraryFileGzipped
	}

	input := wf.resolve(inputRef)

	//ll.print("__THE_LOG__ " +input)

	presetInfoResult := render.create(calculatePresetInfoTpl, {
		preset: presetResource,
		params: {
			species: species
		}
	})

	presetContent := presetInfoResult.output("preset", 24 * 60 * 60 * 1000)
	presetSpecForBack := presetInfoResult.output("presetSpecForBack", 24 * 60 * 60 * 1000)

	// calculating chains
	chains := [
		{ name: "IGH", mixcrChain: "IGH" },
		{ name: "IGKL", mixcrChain: "IGK,IGL" },
		{ name: "TRA", mixcrChain: "TRA" },
		{ name: "TRB", mixcrChain: "TRB" },
		{ name: "TRD", mixcrChain: "TRD" },
		{ name: "TRG", mixcrChain: "TRG" } ]

	runMixcr := render.createEphemeral(processTpl, {
		inputSpec: input.getFutureInputField("spec"),
		inputData: input.getFutureInputField("data"),

		preset: presetResource,
		presetSpecForBack: presetSpecForBack,
		presetContent: presetContent,

		library: library,

		params: smart.createJsonResource({
			species: species,
			chains: chains,
			limitInput: limitInput,
			blockId: blockId,
			presetCommonName: args.presetCommonName,
			isLibraryFileGzipped: isLibraryFileGzipped
		})
	})

	exports := {
		qc: {
			spec: runMixcr.output("qc.spec"),
			data: runMixcr.output("qc.data")
		},
		reports: {
			spec: runMixcr.output("reports.spec"),
			data: runMixcr.output("reports.data")
		},
		clones: runMixcr.output("clonotypes"),
		clns: {
			spec: runMixcr.output("clns.spec"),
			data: runMixcr.output("clns.data")
		}
	}

	outputs := {
		qc: pframes.exportColumnData(runMixcr.output("qc.data")),
		reports: pframes.exportColumnData(runMixcr.output("reports.data")),
		logs: runMixcr.output("logs.data"),
		clonotypes: pframes.exportFrame(runMixcr.output("clonotypes")),
		clns: runMixcr.output("clns.data"),
		fileImports: smart.createMapResource(maps.mapValues(fileImports, func(im) {
			return im.handle
		}))
	}

	if !is_undefined(libraryImportHandle) {
		outputs.libraryImportHandle = libraryImportHandle
	}

	return {
		outputs: outputs,
		exports: exports
	}
})
